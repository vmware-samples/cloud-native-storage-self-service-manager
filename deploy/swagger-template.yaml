openapi: 3.0.0
info:
  title: CNS Manager
  description: "**CNS Manager** helps detect and auto remediate all the storage control\
    \ plane known issues in the CNS solution. \n\nCNS Manager exposes APIs that can\
    \ be invoked by authorized users to detect, remediate and\ntroubleshoot problems.\
    \ CNS manager also continously and periodically monitors the system for all\n\
    the known issues and exposes relevant metrics in the Prometheus format."
  license:
    name: VMware Inc.
  version: 1.0.0
servers:
  - url: http://%CNS_MANAGER_ENDPOINT%/1.0.0/
    description: CNS manager endpoint.
tags:
  - name: ClusterRecordKeeping
    description: Everything about recording cluster details.
  - name: JobDetails
    description: Operations related to CNS manager asynchronous jobs.
  - name: OrphanVolume
    description: Everything about orphan volumes.
  - name: OrphanSnapshot
    description: Everything about orphan snapshots.
  - name: SnapshotForVolume
    description: Operations related to volume Snapshots.
paths:
  /listregisteredclusters:
    get:
      tags:
        - ClusterRecordKeeping
      summary: Get the list of registered k8s clusters from CNS manager inventory.
      description: CNS manager does a record keeping of all the clusters in a vCenter.
        The registered cluster config is  stored in the CNS manager inventory by using
        ClusterId as the key. The listregisteredclusters API will return the list
        of all the registered clusterIds as an array.
      operationId: listregisteredclusters
      responses:
        "200":
          description: Returns clusterIds registered in CNS manager.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterIds'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /registercluster:
    post:
      tags:
        - ClusterRecordKeeping
      summary: Register a Kubernetes cluster with CNS Manager.
      description: >
        The API takes kubeconfig of a given cluster as an input. Make sure to copy the
        contents of the Cluster KubeConfig to a file. The kubeconfig is stored securely inside
        a k8s secret on the cluster where CNS manager is deployed. 
        The API additionally takes optional params like CSI driver clusterId or CSI driver namespace and config secret name 
        to read cluster-id from the CSI secret.
      operationId: registercluster
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                clusterKubeConfigFile:
                  type: string
                  format: binary
                  description: A file with cluster kubeconfig content.
              required:
                - clusterKubeConfigFile
      parameters:
        - name: csiDriverSecretName
          in: query
          description: (Optional) Refers to the name of the config secret of vsphere-csi-driver.
          style: form
          explode: true
          schema:
            type: string
            format: string
            default: vsphere-config-secret
        - name: csiDriverSecretNamespace
          in: query
          description: (Optional) Refers to the namespace of the config secret of vsphere-csi-driver.
          style: form
          explode: true
          schema:
            type: string
            format: string
            default: vmware-system-csi
        - name: clusterId
          in: query
          description: >
            (Optional) Cluster Id of the cluster to be registered with the CNS Manager. 
            This cluster Id needs to be the same that's used in the vSphere CSI driver config of the Kubernetes cluster. 
            For vanilla Kubernetes distributions deployed using [VMware's recommended way](https://docs.vmware.com/en/VMware-vSphere-Container-Storage-Plug-in/2.0/vmware-vsphere-csp-getting-started/GUID-BFF39F1D-F70A-4360-ABC9-85BDAFBE8864.html), 
            it will be present in the CSI secret and will be auto-computed from the provided kubeConfig. 
            For other Kubernetes distributions, please check their docs to determine how they're configuring clusterId for the vSphere CSI driver in the Kubernetes cluster.
          style: form
          explode: true
          schema:
            type: string
            format: string
      responses:
        "200":
          description: Returns RegisterClusterResult.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterClusterResult'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /deregistercluster:
    post:
      tags:
        - ClusterRecordKeeping
      summary: Deregister a cluster with the CNS Manager.
      description: The API takes unique clusterID as input and de-registers the cluster
        from CNS Manager.
      operationId: deregistercluster
      parameters:
        - name: clusterId
          in: query
          description: Refers to cluster-id available in decoded data field from vsphere-config-secret.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: string
      responses:
        "200":
          description: Returns DeregisterClusterResult.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeregisterClusterResult'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /getjobstatus:
    get:
      tags:
        - JobDetails
      summary: Get status of an asynchronous job.
      description: "There are a few functionalities offered through this tool that\
        \ are long-running and may be \nrunning in background. This API helps to fetch\
        \ the status of a job that's submitted, in progress\nor completed. A job can\
        \ be in one of the following status:\n\nQueued - Job has been created but\
        \ hasn't started processing.\n\nRunning - Job is currently executing.\n\n\
        Success - Job has completed successfully with all tasks succeeding.\n\nError\
        \ - Job ran but some or all of its tasks failed."
      operationId: getJobStatus
      parameters:
        - name: jobId
          in: query
          description: Job Id for which the details need to be fetched.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: string
      responses:
        "200":
          description: Returns JobResult.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResult'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /waitforjob:
    get:
      tags:
        - JobDetails
      summary: Wait until a job is successful or failed.
      description: "This is a blocking API that waits for job to get successful or \n\
        fail. Unlike `getJobStatus` API which fetches the current\nstatus of the job,\
        \ this will wait for the job to finish before \nreturning the job result response."
      operationId: waitForJob
      parameters:
        - name: jobId
          in: query
          description: Job Id for which to wait to complete.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: string
      responses:
        "200":
          description: Returns JobResult.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResult'
  /orphanvolumes:
    get:
      tags:
        - OrphanVolume
      summary: List all the orphan volumes.
      description: >
        Returns a list of orphan volumes for the given input parameters, which could be attached or detached.
        Since the detection of orphan volumes is an expensive operation, the operation is performed asynchronously at regular intervals.
        This API returns the list of orphan volumes found in the last run of the operation.
        
        
        If the request is successful, the response will contain the following:

        1. `TotalOrphans` - The total number of orphan volumes found.
        
        2. `OrphanVolumes` - The list of orphan volumes found.
        
        3. `RetryAfterMinutes` - The time in minutes after which the next retry should be attempted to get the updated orphan volume list.
        
        4. `TotalOrphansAttached` - The total number of orphan volumes found that are attached to a VM.
        
        5. `TotalOrphansDetached` - The total number of orphan volumes found that are detached.
        
        6. `Limit` - The maximum number of orphan volumes to be returned.
        
        7. `NextOffset` - The offset of the next page if there are more orphan volumes to query.
        
        Orphan volumes are safe to delete since there is no PersistentVolume in the Kubernetes cluster referring to them.
      operationId: orphanVolumeList
      parameters:
        - name: includeDetails
          in: query
          description: (Optional) Set to "true" to get a detailed dump of the orphan volume.
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            default: false
        - name: datacenter
          in: query
          description: (Optional) Datacenter name to narrow down the orphan volume search.
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: string
        - name: datastores
          in: query
          description: (Optional) List of comma-separated datastores. Specify only if
            the `datacenter` param is specified.
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: string
        - $ref: '#/components/parameters/PageOffset'
        - $ref: '#/components/parameters/PageLimit'
      responses:
        "200":
          description: Returns OrphanVolumeResult.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrphanVolumeResult'
          headers:
            X-Retry-After:
              $ref: '#/components/headers/X-Retry-After'
            X-Limit:
              $ref: '#/components/headers/X-Limit'
            X-Next-Offset:
              $ref: '#/components/headers/X-Next-Offset'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - OrphanVolume
      summary: Delete orphan volumes.
      description: Delete the orphan volumes for the given criteria.
      operationId: orphanVolumeDelete
      parameters:
        - name: deleteAttachedOrphans
          in: query
          description: >-
            Set to `true` to delete attached orphans. When set to `true`, 
            the API will detach the orphan volume from the VM before deleting it.
          required: true
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            default: false
        - name: datacenter
          in: query
          description: (Optional) Datacenter name to narrow down the deletion of orphan volumes to.
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: string
        - name: datastores
          in: query
          description: (Optional) List of comma-separated datastores to narrow down
            the deletion of orphan volumes to. Specify only if the `datacenter` param
            is specified.
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: string
      responses:
        "200":
          description: Returns OrphanVolumeDeleteResult.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrphanVolumeDeleteResult'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orphansnapshots:
    get:
      tags:
        - OrphanSnapshot
      summary: List all the orphan snapshots.
      description: |-
        Use this API to identify orphan snapshots. From vSphere CSI plugin's perspective,
        orphan snapshots are FCD snapshots that were initiated through the vSphere CSI driver
        but do not have a corresponding VolumeSnapshotContent object in the Kubernetes cluster.
        snapshotPrefix is the prefix used in the snapshot description. Its default value is “snapshot”,
        which is also the default value used by snapshot sidecar in CSI and it can be configured based
        on prefix used in the snapshot sidecar. Use the `snapshotPrefix` parameter to specify alternate
        prefix.

        From Velero vSphere plugin's perspective, orphan snapshots are snapshots whose upload is failing
        with multiple attempts or snapshots whose local deletion is failing after successful upload.
        For Velero vSphere plugin, user has to specify “AstrolabeSnapshot” as the snapshotPrefix.

        GET API for orphan snapshots support pagination. The response body contains totalOrphanSnapshots,
        limit and offset values. Also, response header contains X-Limit and X-Next-Offset values. Based on these
        values user can decide if there are more results to be fetched.
        Since the detection of orphan snapshots is an expensive operation, the operation is performed asynchronously
        at regular intervals. This API returns the list of orphan snapshots found in the last run of the operation.
        `retryAfterMinutes` in response body indicates the time in minutes after which the next retry should be
        attempted to get the updated orphan snapshot list.
      operationId: orphanSnapshotsList
      parameters:
        - name: datacenter
          in: query
          description: (Optional) Datacenter name to narrow down the orphan snapshots
            search.
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: string
        - name: datastores
          in: query
          description: (Optional) List of comma-separated datastores. Specify only if
            the `datacenter` param is specified.
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: string
        - name: snapshotPrefix
          in: query
          description: (Optional) The snapshot prefix indicates the prefix used in snapshot description.
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: string
            default: snapshot
        - name: limit
          in: query
          description: (Optional) Limit specifies the maximum entries that should be displayed in single request.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
            default: 50
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: (Optional) Offset specifies the starting point of the result set.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
            default: 0
            minimum: 0
      responses:
        "200":
          description: Returns list of orphan snapshots.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrphanSnapshotResult'
          headers:
            X-Limit:
              description: The maximum entries that are displayed in single request.
              schema:
                type: string
            X-Next-Offset:
              description: The starting point of the next result set.
              schema:
                type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - OrphanSnapshot
      summary: Delete orphan snapshots.
      description: |-
        Use this API to identify and delete orphan snapshots. From vSphere CSI plugin's perspective,
        orphan snapshots are FCD snapshots that were initiated through the vSphere CSI driver
        but do not have a corresponding VolumeSnapshotContent object in the Kubernetes cluster.
        snapshotPrefix is the prefix used in the snapshot description. Its default value is “snapshot”,
        which is also the default value used by snapshot sidecar in CSI and it can be configured based
        on prefix used in the snapshot sidecar. Use the `snapshotPrefix` parameter to specify alternate
        prefix.

        From Velero vSphere plugin's perspective, orphan snapshots are snapshots whose upload is failing
        with multiple attempts or snapshots whose local deletion is failing after successful upload.
        For Velero vSphere plugin, user has to specify “AstrolabeSnapshot” as the snapshotPrefix.

        Orphan snapshot deletion operation is performed asynchronously. It returns a job id,
        the status of which can be retrieved using `jobStatus` API.
      operationId: orphanSnapshotsDelete
      parameters:
        - name: datacenter
          in: query
          description: (Optional) Datacenter name to narrow down the orphan snapshots
            search.
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: string
        - name: datastores
          in: query
          description: (Optional) List of comma-separated datastores. Specify only if
            the `datacenter` param is specified.
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: string
        - name: snapshotPrefix
          in: query
          description: (Optional) The snapshot prefix indicates the prefix used in snapshot description.
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: string
            default: snapshot
      responses:
        "202":
          description: Returns a job Id, status of which can be fetched using jobStatus API.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotDeleteResult'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /volumes/{volumeId}/snapshots:
    get:
      tags:
        - SnapshotForVolume
      summary: List all the snapshots for a specific volume
      description: |-
        Use this API to retrieve all the snapshots for a specific volume.
      operationId: ListAllSnapshotsForVolume
      parameters:
        - name: volumeId
          in: path
          description: Unique Id of the volume.
          required: true
          schema:
            type: string
            format: string
        - name: datacenter
          in: query
          description: Datacenter name to which volume and snapshots belong to.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: string
        - name: datastore
          in: query
          description: Datastore name to which volume and snapshots belong to.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: string
        - name: snapshotPrefix
          in: query
          description: |-
            (Optional) The snapshot prefix indicates the prefix used in snapshot description.
            If snapshot prefix is not specified, then it will list all snapshots of a volume.
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: string
      responses:
        200:
          description: Returns details of all snapshots of a volume.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotsForVolumeResult'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - SnapshotForVolume
      summary: Delete all the snapshots for a specific volume
      description: |-
        Use this API to delete all the snapshots for a specific volume.
        Snapshot deletion operation is performed asynchronously. It returns a job id,
        the status of which can be retrieved using `jobStatus` API.
      operationId: deleteAllSnapshotsForVolume
      parameters:
        - name: volumeId
          in: path
          description: Unique Id of the volume.
          required: true
          schema:
            type: string
            format: string
        - name: datacenter
          in: query
          description: Datacenter name to which volume and snapshots belong to.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: string
        - name: datastore
          in: query
          description: Datastore name to which volume and snapshots belong to.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: string
        - name: snapshotPrefix
          in: query
          description: |-
            (Optional) The snapshot prefix indicates the prefix used in snapshot description.
            If snapshot prefix is not specified, then it will delete all snapshots of a volume.
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: string
      responses:
        202:
          description: Returns a job Id, status of which can be fetched using jobStatus API.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotDeleteResult'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /volumes/{volumeId}/snapshots/{snapshotId}:
    delete:
      tags:
        - SnapshotForVolume
      summary: Delete one specific snapshot for volume
      description: |-
        Use this API to delete the specific snapshot of a volume.
        Snapshot deletion operation is performed asynchronously. It returns a job id,
        the status of which can be retrieved using `jobStatus` API.
      operationId: deleteSnapshotForVolume
      parameters:
        - name: volumeId
          in: path
          description: Unique Id of the volume.
          required: true
          schema:
            type: string
            format: string
        - name: snapshotId
          in: path
          description: Unique Id of the snapshot.
          required: true
          schema:
            type: string
            format: string
        - name: datacenter
          in: query
          description: Datacenter name to which volume and snapshot belongs to.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: string
        - name: datastore
          in: query
          description: Datastore name to which volume and snapshot belongs to.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: string
      responses:
        202:
          description: Returns a job Id, status of which can be fetched using jobStatus API.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotDeleteResult'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  headers:
    X-Retry-After:
      required: false
      description: The number of seconds to wait before retrying the request.
      schema:
        type: string
    X-Limit:
      required: false
      description: The maximum entries that are displayed in single request.
      schema:
        type: string
    X-Next-Offset:
      required: false
      description: The starting point of the next result set.
        This field is returned only if there are more orphan volumes to query.
      schema:
        type: string
  parameters:
    PageLimit:
      name: limit
      in: query
      description: |-
        (Optional) The limit indicates the maximum number of orphan volumes
        to be returned.
      required: false
      schema:
        type: integer
        minimum: 0
        maximum: 2500
    PageOffset:
      name: offset
      in: query
      description: |-
        (Optional) The offset indicates the starting point of the result
        set.
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
  schemas:
    Error:
      required:
        - error
        - message
      properties:
        message:
          type: string
        error:
          type: string
    ClusterIds:
      type: array
      description: Array of cluster IDs registered in CNS manager.
      items:
        type: string
      x-schema-name: ClusterIds
    RegisterClusterResult:
      properties:
        status:
          type: string
          description: Status to indicate if registration was successful.
          format: string
          example: Registration Successful
        clusterId:
          type: string
          description: Indicates the clusterId which got registered with CNS Manager.
          format: string
          example: cluster-1
      example:
        status: Registration Successful
        clusterId: cluster-1
    DeregisterClusterResult:
      properties:
        status:
          type: string
          description: Status to indicate if deregistration was successful.
          format: string
          example: Deregistration Successful
        clusterId:
          type: string
          description: Indicates the clusterId which got deregistered with CNS Manager.
          format: string
          example: cluster-1
      example:
        status: Deregistration Successful
        clusterId: cluster-1
    JobResult:
      properties:
        jobId:
          type: string
          description: ID of the job.
          example: snapshotdeletionjob-d1e10795-700f-11ec-bcf8-8630aaccb28e
        phase:
          type: string
          description: Current phase of the job.
          example: Running
        jobParameters:
          type: object
          description: Input parameters of the job.
          oneOf:
            - $ref: '#/components/schemas/SnapshotDeletionJobParameters'
        jobStatus:
          type: object
          description: Status of individual tasks and the overall job status.
          oneOf:
            - $ref: '#/components/schemas/SnapshotDeletionJobStatus'
      example:
        phase: Running
        jobId: snapshotdeletionjob-d1e10795-700f-11ec-bcf8-8630aaccb28e
        jobStatus: ""
        jobParameters: ""
    Fault:
      properties:
        message:
          type: string
          description: Error message for the fault.
          example: The object or item referred to could not be found in CNS.
        faultType:
          type: string
          description: Type of fault.
          example: CnsFault
    OrphanVolumeDetails:
      type: object
      description: OrphanVolumeDetails represents if the orphan volume is attached to a VM or not.
      required: [ attached ]
      properties:
        attached:
          type: boolean
          description: Indicates whether the orphan volume is attached to a VM or
            not.
          example: true
        vm:
          type: string
          description: The name of VM to which the orphan volume is attached.
          example: k8s-node-1
      example:
        vm: k8s-node-1
        attached: true
    OrphanVolume:
      description: >-
        Orphan volumes are volumes that are present in the vSphere datastore but have
        no corresponding PersistentVolume in the Kubernetes cluster. 
        Primarily, Orphan volumes are created when the CNS solution creates more than one volume
        for a Persistent Volume in the Kubernetes cluster. This can occur when the
        vCenter components are slow, storage is slow, vCenter service restarts, or
        there are connectivity issues between vCenter and ESXi hosts
      properties:
        volumeId:
          type: string
          description: ID of the orphan volume.
          example: 64d6787e-397b-4c99-a151-c6f37c49fcff
        volumeName:
          type: string
          description: Name of the orphan volume.
          example: pvc-338934c2-6067-489a-a929-7c559ea18c82
        datacenter:
          type: string
          description: Datacenter where the orphan volume is located.
          example: VSAN-DC
        datastore:
          type: string
          description: Datastore where the orphan volume is located.
          example: vsanDatastore
        createTime:
          type: string
          description: Create time of the orphan volume.
          example: 2021-07-23 19:19:59.365062 +0000 UTC
        capacityInMb:
          type: integer
          description: Capacity of the orphan volume.
          format: int64
          example: 100
        details:
          $ref: '#/components/schemas/OrphanVolumeDetails'
      example:
        createTime: 2021-07-23 19:19:59.365062 +0000 UTC
        datacenter: VSAN-DC
        datastore: vsanDatastore
        volumeName: pvc-338934c2-6067-489a-a929-7c559ea18c82
        volumeId: 64d6787e-397b-4c99-a151-c6f37c49fcff
        details:
          vm: k8s-node-1
          attached: true
        capacityInMb: 100
    OrphanVolumeResult:
      required:
        - totalOrphans
        - orphanVolumes
        - retryAfterMinutes
      properties:
        totalOrphans:
          type: integer
          description: The total number of orphan volumes detected in the vCenter for the input.
          example: 1
        totalOrphansAttached:
          type: integer
          description: The total number of orphan volumes that are attached to a VM.
            This field is returned only if includeDetails is set to true.
          example: 1
        totalOrphansDetached:
          type: integer
          description: The total number of orphan volumes that are not attached to a VM.
            This field is returned only if includeDetails is set to true.
          example: 1
        orphanVolumes:
          type: array
          description: Array of orphan volumes.
          items:
            $ref: '#/components/schemas/OrphanVolume'
        retryAfterMinutes:
          type: integer
          description: The time in minutes after which the next retry should be
            attempted to get the updated orphan volume list.
          example: 1
        limit:
          type: integer
          description: The maximum number of orphan volumes returned.
          example: 100
        nextOffset:
          type: integer
          description: The offset of the next page if there are more orphan volumes to query.
          example: 100
      example:
        totalOrphansAttached: 2
        totalOrphansDetached: 1
        orphanVolumes:
          - createTime: 2021-07-23 19:19:59.365062 +0000 UTC
            datacenter: VSAN-DC
            datastore: vsanDatastore
            volumeName: pvc-338934c2-6067-489a-a929-7c559ea18c82
            volumeId: 64d6787e-397b-4c99-a151-c6f37c49fcff
            details:
              vm: k8s-node-1
              attached: true
            capacityInMb: 100
          - createTime: 2021-07-23 19:19:59.365062 +0000 UTC
            datacenter: VSAN-DC
            datastore: vsanDatastore
            volumeName: pvc-338934c2-6067-489a-a929-7c559ea18c82
            volumeId: 64d6787e-397b-4c99-a151-c6f37c49fcff
            details:
              vm: k8s-node-1
              attached: true
            capacityInMb: 100
          - createTime: 2021-07-23 19:19:59.365062 +0000 UTC
            datacenter: VSAN-DC
            datastore: local-0 (1)
            volumeName: pvc-338934c2-6067-489a-a929-7c559ea18c82
            volumeId: 64d6787e-397b-4c99-a151-c6f37c49fcff
            details:
              attached: false
            capacityInMb: 100
        totalOrphans: 30
        retryAfterMinutes: 10
        limit: 3
        nextOffset: 3
    OrphanVolumeDeleteResult:
      type: object
      description: OrphanVolumeDeleteResult is the result of deleting orphan volumes.
      required:
        - totalOrphansDetected
        - totalOrphansDeleted
        - totalDetachedOrphansDeleted
        - totalAttachedOrphansDeleted
        - successfulOrphanDeletions
      properties:
        totalOrphansDetected:
          type: integer
          description: Number of orphan volumes detected.
          format: int64
          example: 10
        totalOrphansDeleted:
          type: integer
          description: Number of orphan volumes deleted.
          format: int64
          example: 5
        totalDetachedOrphansDeleted:
          type: integer
          description: Number of deleted orphan volumes that were detached.
          format: int64
          example: 3
        totalAttachedOrphansDeleted:
          type: integer
          description: Number of deleted orphan volumes that were attached to a VM.
          format: int64
          example: 2
        successfulOrphanDeletions:
          type: array
          description: Array of successfully deleted orphan volume IDs.
          items:
            type: string
        failedOrphanDeletions:
          description: Array of failed orphan volume deletions with the reason for failure for each orphan volume.
          type: array
          items:
            $ref: '#/components/schemas/OrphanVolumeDeleteFailure'
      example:
        totalOrphansDetected: 7
        totalOrphansDeleted: 5
        totalDetachedOrphansDeleted: 3
        totalAttachedOrphansDeleted: 2
        successfulOrphanDeletions:
          - 44d6787e-697b-4d99-a151-c3f37c49fcff
          - 54d6787e-397b-4c99-a151-c4f37c49fcff
          - 74d6787e-397b-4c99-a151-c5f37c49fcff
          - 84d6787e-397b-4c99-a151-c6f37c49fcff
          - 94d7787e-397b-4c99-a151-c7f37c49fcff
        failedOrphanDeletions:
          - volumeId: 64d6787e-397b-4c99-a151-c6f37c49fcff
            reason: Failed to delete orphan volume
          - volumeId: 94d6787e-397b-4c99-a151-c7f37c49fcff
            reason: Failed to delete orphan volume
    OrphanVolumeDeleteFailure:
      type: object
      description: >-
        OrphanVolumeDeleteFailure is the result of a failed orphan volume deletion. 
        It contains the ID of the orphan volume and the reason for deletion failure.
      required:
        - volumeId
        - reason
      properties:
        volumeId:
          type: string
          description: ID of the orphan volume whose deletion failed.
          example: 64d6787e-397b-4c99-a151-c6f37c49fcff
        reason:
          type: string
          description: Reason for deletion failure.
          example: Failed to delete orphan volume
      example:
        volumeId: 64d6787e-397b-4c99-a151-c6f37c49fcff
        reason: Failed to delete orphan volume
    OrphanSnapshotResult:
      properties:
        totalOrphanSnapshots:
          type: integer
          description: The total orphan snapshots returned.
          format: int64
          example: 1
        limit:
          type: integer
          description: Limit specifies the maximum number of entries that are displayed in single request.
          format: int64
          example: 50
        offset:
          type: integer
          description: Offset specifies the starting point of the result set.
          format: int64
          example: 0
        orphanSnapshots:
          type: array
          description: Array of orphan snapshots
          items:
            $ref: '#/components/schemas/OrphanSnapshot'
        retryAfterMinutes:
          type: integer
          description: Since the detection of orphan snapshots is an expensive operation,
            the operation is performed asynchronously at regular intervals. This API returns
            the list of orphan snapshots found in the last run of the operation.
            `retryAfterMinutes` indicates the time in minutes after which the next retry should be
            attempted to get the updated orphan snapshot list.
          format: int64
          example: 60
      example:
        totalOrphanSnapshots: 2
        limit: 50
        offset: 0
        orphanSnapshots:
          - volumeId: 64d6787e-397b-4c99-a151-c6f37c49fcff
            volumeSnapshotId: 74d6787e-397b-4c99-a151-c6f37c49fcff
            datacenter: DC-1
            datastore: vsanDatastore
            createTime: 2021-07-23 19:19:59.365062 +0000 UTC
            snapshotDescription: Sample
          - volumeId: 84d6787e-397b-4c99-a151-c6f37c49fcff
            volumeSnapshotId: 94d6787e-397b-4c99-a151-c6f37c49fcff
            datacenter: DC-1
            datastore: vsanDatastore
            createTime: 2021-07-23 19:19:59.365063 +0000 UTC
            snapshotDescription: Sample2
        retryAfterMinutes: 60
    OrphanSnapshot:
      properties:
        volumeId:
          type: string
          description: FCD Id of the orphan snapshot.
          example: 64d6787e-397b-4c99-a151-c6f37c49fcff
        volumeSnapshotId:
          type: string
          description: Snapshot Id of the orphan snapshot.
          example: 74d6787e-397b-4c99-a151-c6f37c49fcff
        datacenter:
          type: string
          description: Datacenter where the orphan snapshot is located.
          example: DC-1
        datastore:
          type: string
          description: Datastore where the orphan snapshot is located.
          example: vsanDatastore
        createTime:
          type: string
          description: Create time of the orphan snapshot.
          example: 2021-07-23 19:19:59.365062 +0000 UTC
        snapshotDescription:
          type: string
          description: Description of orphan snapshot
          example: Sample
      example:
        volumeId: 64d6787e-397b-4c99-a151-c6f37c49fcff
        volumeSnapshotId: 74d6787e-397b-4c99-a151-c6f37c49fcff
        datacenter: DC-1
        datastore: vsanDatastore
        createTime: 2021-07-23 19:19:59.365062 +0000 UTC
        snapshotDescription: Sample
    SnapshotDeleteResult:
      properties:
        jobId:
          type: string
          description: Identifier of the snapshot deletion job submitted
          example: snapshotdeletionjob-d1e10795-700f-11ec-bcf8-8630aaccb28e
      example:
        jobId: snapshotdeletionjob-d1e10795-700f-11ec-bcf8-8630aaccb28e
    SnapshotDeletionJobParameters:
      properties:
        fcdId:
          type: string
          description: fcdId is the identifier of FCD.
          example: 64d6787e-397b-4c99-a151-c6f37c49fcff
        snapshotId:
          type: string
          description: snapshotId is the identifier of snapshot.
          example: 785g347e-397b-4c99-a151-c6f37c805gh98
        datacenter:
          type: string
          description: datacenter to which snapshots belong.
          example: VSAN-DC
        datastores:
          type: array
          description: datastores to which snapshots belong.
          items:
            type: string
        snapshotPrefix:
          type: string
          description: snapshotPrefix is the prefix used in the snapshot description.
          example: snapshot
    SnapshotDeletionJobStatus:
      properties:
        totalSnapshotsPlannedForDeletion:
          type: integer
          description: Total snapshots which will be deleted as part of this job.
          format: int32
          example: 2
        totalSnapshotsSuccessfullyDeleted:
          type: integer
          description: Total snapshots which got successfully deleted as part of this job.
          format: int32
          example: 2
        totalSnapshotsWithFailedDeletion:
          type: integer
          description: Total snapshots whose deletion failed as part of this job.
          format: int32
          example: 0
        startTime:
          type: string
          description: Time at which the job started processing.
          format: date-time
          example: "2022-02-18T22:28:54Z"
        endTime:
          type: string
          description: Time at which the job completed processing.
          format: date-time
          example: "2022-02-18T22:29:01Z"
        snapshotDeletionTasks:
          type: array
          description: Array of status of individual snapshot deletion tasks in the
            job.
          items:
            $ref: '#/components/schemas/SnapshotDeletionTaskStatus'
    SnapshotDeletionTaskStatus:
      properties:
        fcdId:
          type: string
          description: Id of the FCD to which snapshot belongs.
          example: 64d6787e-397b-4c99-a151-c6f37c49fcff
        snapshotId:
          type: string
          description: Id of the snapshot to be deleted.
          example: 785g347e-397b-4c99-a151-c6f37c805gh98
        datacenter:
          type: string
          description: datacenter to which snapshot belongs.
          example: VSAN-DC
        datastore:
          type: string
          description: datastore to which snapshot belongs.
          example: vsanDatastore
        snapshotDescription:
          type: string
          description: description of the snapshot.
          example: AstrolabeSnapshot
        phase:
          type: string
          description: Current phase of the snapshot deletion task.
          example: Success
          enum:
            - Queued
            - Running
            - Success
            - Error
        taskStartTime:
          type: string
          description: The timestamp at which the task was invoked.
          format: date-time
          example: "2022-02-18T22:28:54Z"
        taskEndTime:
          type: string
          description: The timestamp at which the task finished.
          format: date-time
          example: "2022-02-18T22:28:54Z"
        error:
          $ref: "#/components/schemas/Fault"
    SnapshotsForVolumeResult:
      properties:
        Snapshots:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotDetails'
    SnapshotDetails:
      properties:
        snapshotId:
          type: string
          description: Id of the snapshot.
          example: 74d6787e-397b-4c99-a151-c6f37c49fcff
        volumeId:
          type: string
          description: Id of the volume.
          example: 64d6787e-397b-4c99-a151-c6f37c49fcff
        createTime:
          type: string
          description: Time when snapshot is created.
          example: "2022-12-22 19:57:09.250871 +0000 UTC"
        snapshotDescription:
          type: string
          description: Description of the snapshot.
          example: Sample
        velerovSpherePluginSnapshotPhase:
          type: string
          description: Phase of the sanpshot if it is created by Velero vSphere plugin.
          example: Uploaded
        associatedVolumeSnapshotContent:
          type: string
          description: Associated VolumeSnapshotContent name if snapshot is created by CSI driver.
          example: snapcontent-72cafd03-b848-4628-b41f-2194cffc71d0
        owner:
          type: string
          description: Owner who created this snapshot. e.g. vSphere CSI driver, Velero vSphere plugin etc.
          example: vSphere CSI driver
