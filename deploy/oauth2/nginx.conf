events {
    worker_connections 1024;
}

# This is the location where Nginx will store the PID file.
# The default location where Nginx stores the PID file is not accessible in certain flavors of K8s like OCP.
pid /tmp/nginx.pid;

http {
    server {
        listen       8081;
        #Use below instead to configure an https server
        #listen       443 ssl;
        server_name  cnsmanager.cns.vmware.com;

        #Uncomment this to enable ssl/tls communication over https. 
        #ssl_certificate     /etc/nginx/tls/tls.crt;
        #ssl_certificate_key /etc/nginx/tls/tls.key;

        location /ui {
            auth_request /oauth2/auth;
            error_page 401 = /oauth2/sign_in;

            # pass information via X-User and X-Forwarded-Email headers to backend,
            # requires running with --set-xauthrequest flag
            auth_request_set $user   $upstream_http_x_auth_request_user;
            auth_request_set $email  $upstream_http_x_auth_request_email;
            proxy_set_header X-User  $user;
            proxy_set_header X-Forwarded-Email $email;

            # if you enabled --cookie-refresh, this is needed for it to work with auth_request
            auth_request_set $auth_cookie $upstream_http_set_cookie;
            add_header Set-Cookie $auth_cookie;

            proxy_pass         http://localhost:8080;
            proxy_set_header   X-Forwarded-For $remote_addr;
            proxy_set_header   Host $http_host;
        }

        location /1.0.0 {
            auth_request /oauth2/auth;

            # pass information via X-User and X-Forwarded-Email headers to backend,
            # requires running with --set-xauthrequest flag
            auth_request_set $user   $upstream_http_x_auth_request_user;
            auth_request_set $email  $upstream_http_x_auth_request_email;
            proxy_set_header X-User  $user;
            proxy_set_header X-Forwarded-Email $email;

            # if you enabled --cookie-refresh, this is needed for it to work with auth_request
            auth_request_set $auth_cookie $upstream_http_set_cookie;
            add_header Set-Cookie $auth_cookie;
            
            proxy_pass             http://localhost:8100;
            proxy_set_header       Host $host;
            proxy_buffering        on;

            proxy_read_timeout 300;
            proxy_connect_timeout 300;
            proxy_send_timeout 300;
        }

        #Since /waitforjob is supposed to be a blocking API call, set a long timeout of 1d
        location /1.0.0/waitforjob {
            auth_request /oauth2/auth;

            # pass information via X-User and X-Forwarded-Email headers to backend,
            # requires running with --set-xauthrequest flag
            auth_request_set $user   $upstream_http_x_auth_request_user;
            auth_request_set $email  $upstream_http_x_auth_request_email;
            proxy_set_header X-User  $user;
            proxy_set_header X-Forwarded-Email $email;

            # if you enabled --cookie-refresh, this is needed for it to work with auth_request
            auth_request_set $auth_cookie $upstream_http_set_cookie;
            add_header Set-Cookie $auth_cookie;
            
            proxy_pass             http://localhost:8100;
            proxy_set_header       Host $host;
            proxy_buffering        on;

            proxy_read_timeout 1d;
            proxy_connect_timeout 1d;
            proxy_send_timeout 1d;
        }

        # Since DELETE /orphanvolumes could be a long running operation,
        # set a timeout of 30m for /orphanvolumes endpoints
        location /1.0.0/orphanvolumes {
            auth_request /oauth2/auth;

            # pass information via X-User and X-Forwarded-Email headers to backend,
            # requires running with --set-xauthrequest flag
            auth_request_set $user   $upstream_http_x_auth_request_user;
            auth_request_set $email  $upstream_http_x_auth_request_email;
            proxy_set_header X-User  $user;
            proxy_set_header X-Forwarded-Email $email;

            # if you enabled --cookie-refresh, this is needed for it to work with auth_request
            auth_request_set $auth_cookie $upstream_http_set_cookie;
            add_header Set-Cookie $auth_cookie;

            proxy_pass             http://localhost:8100;
            proxy_set_header       Host $host;
            proxy_buffering        on;

            proxy_read_timeout 30m;
        }

        location /oauth2/ {
            proxy_pass       http://127.0.0.1:4180;
            proxy_set_header Host                    $host;
            proxy_set_header X-Real-IP               $remote_addr;
            proxy_set_header X-Scheme                $scheme;
            proxy_set_header X-Auth-Request-Redirect $request_uri;
            # or, if you are handling multiple domains:
            # proxy_set_header X-Auth-Request-Redirect $scheme://$host$request_uri;
        }
        
        location = /oauth2/auth {
            proxy_pass       http://127.0.0.1:4180;
            proxy_set_header Host             $host;
            proxy_set_header X-Real-IP        $remote_addr;
            proxy_set_header X-Scheme         $scheme;
            # nginx auth_request includes headers but not body
            proxy_set_header Content-Length   "";
            proxy_pass_request_body           off;
        }
    }
}
